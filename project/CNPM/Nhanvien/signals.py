from django.db.models.signals import post_save, post_delete, pre_delete
from django.dispatch import receiver
from KhachHang.models import Appointment
from Nhanvien.models import Booking
from Bacsi.models import MedicalRecord

# C·ªù b·∫£o v·ªá ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
prevent_recursion = False

### üè• 1. ƒê·ªìng b·ªô Booking v·ªõi MedicalRecord
@receiver(post_save, sender=Booking)
def sync_medical_record(sender, instance, created, **kwargs):
    """T·∫°o ho·∫∑c c·∫≠p nh·∫≠t MedicalRecord khi Booking thay ƒë·ªïi"""
    global prevent_recursion
    if prevent_recursion:
        return

    prevent_recursion = True
    MedicalRecord.objects.update_or_create(
        booking=instance,
        defaults={
            'doctor_name': instance.doctor_name,
            'status': instance.status,
            'diagnosis': instance.diagnosis,
            'prescription': instance.prescription,
            'notes': instance.notes,
            'cage_number': instance.cage_number  # Th√™m s·ªë ph√≤ng
        }
    )
    prevent_recursion = False

@receiver(pre_delete, sender=Booking)
def delete_medical_record_with_booking(sender, instance, **kwargs):
    """X√≥a MedicalRecord khi Booking b·ªã x√≥a"""
    if hasattr(instance, 'medical_record'):
        instance.medical_record.delete()

### üìÖ 2. ƒê·ªìng b·ªô Appointment v·ªõi Booking
@receiver(post_save, sender=Appointment)
def sync_appointment_to_booking(sender, instance, **kwargs):
    """ƒê·ªìng b·ªô Appointment -> Booking"""
    global prevent_recursion
    if prevent_recursion:
        return

    prevent_recursion = True
    Booking.objects.update_or_create(
        id=instance.id,  # S·ª≠ d·ª•ng ID thay v√¨ phone_number ƒë·ªÉ tr√°nh nh·∫ßm b·∫£n ghi
        defaults={ 
            'owner_name': instance.owner_name,
            'phone_number': instance.phone_number,  # ƒê·∫£m b·∫£o gi·ªØ s·ªë ƒëi·ªán tho·∫°i
            'email': instance.email,
            'address': instance.address,
            'pet_name': instance.pet_name,
            'pet_species': instance.pet_species,
            'pet_gender': instance.pet_gender,
            'pet_condition': instance.pet_condition,
            'appointment_date': instance.appointment_date,
            'appointment_time': instance.appointment_time,
            'doctor_name': instance.doctor_name,
            'staff_notes': instance.staff_notes,
            'is_paid': instance.is_paid,
            'fee_amount': instance.fee_amount,
        }
    )
    prevent_recursion = False

@receiver(post_save, sender=Booking)
def sync_booking_to_appointment(sender, instance, **kwargs):
    """ƒê·ªìng b·ªô Booking -> Appointment"""
    global prevent_recursion
    if prevent_recursion:
        return

    prevent_recursion = True
    Appointment.objects.update_or_create(
        id=instance.id,  # S·ª≠ d·ª•ng ID thay v√¨ phone_number
        defaults={
            'owner_name': instance.owner_name,
            'phone_number': instance.phone_number,
            'email': instance.email,
            'address': instance.address,
            'pet_name': instance.pet_name,
            'pet_gender': instance.pet_gender,
            'pet_condition': instance.pet_condition,
            'appointment_date': instance.appointment_date,
            
            'appointment_time': instance.appointment_time,
            'doctor_name': instance.doctor_name,
            'staff_notes': instance.staff_notes,
            'status': instance.status,
            'diagnosis': instance.diagnosis,
            'prescription': instance.prescription,
            'notes': instance.notes
        }
    )
    prevent_recursion = False

### üóëÔ∏è 3. X√≥a Booking ho·∫∑c Appointment khi m·ªôt trong hai b·ªã x√≥a
@receiver(post_delete, sender=Appointment)
def delete_booking_when_appointment_deleted(sender, instance, **kwargs):
    """X√≥a Booking khi Appointment b·ªã x√≥a"""
    Booking.objects.filter(id=instance.id).delete()  # D√πng ID ƒë·ªÉ tr√°nh x√≥a nh·∫ßm

@receiver(post_delete, sender=Booking)
def delete_appointment_when_booking_deleted(sender, instance, **kwargs):
    """X√≥a Appointment khi Booking b·ªã x√≥a"""
    Appointment.objects.filter(id=instance.id).delete()
